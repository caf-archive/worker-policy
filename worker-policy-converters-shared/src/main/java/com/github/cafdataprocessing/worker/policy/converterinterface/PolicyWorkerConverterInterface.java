/*
 * Copyright 2015-2017 Hewlett Packard Enterprise Development LP.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.cafdataprocessing.worker.policy.converterinterface;

import com.github.cafdataprocessing.worker.policy.shared.TaskData;
import com.google.common.collect.Multimap;
import com.hpe.caf.api.Codec;
import com.hpe.caf.api.CodecException;
import com.hpe.caf.api.worker.InvalidTaskException;

public interface PolicyWorkerConverterInterface
{
    /**
     * Called to provide the TaskData if it is not provided by the context
     */
    default TaskData convert(PolicyWorkerConverterRuntimeBase runtime)
        throws PolicyWorkerConverterException, CodecException, InvalidTaskException
    {
        return null;
    }

    /**
     * Updates the document based on the data returned by the worker
     */
    default void convert(PolicyWorkerConverterRuntime runtime)
        throws PolicyWorkerConverterException, CodecException, InvalidTaskException
    {
    }

    /**
     * Takes in a context previously generated by a converter and returns the policy worker task data it represents.
     * @param context Representation of the policy worker state that may be used in constructing a TaskData.
     * @param taskData The task data intended for this converter to convert which may contain information for use in constructing
     *                          the policy worker task data.
     * @param codec Codec to use in deserializing context.
     * @return The constructed policy worker task data from the parameters provided.
     * @throws CodecException If an exception occurs during operations using provided codec.
     */
    default TaskData convertPolicyWorkerContext(final byte[] context, final byte[] taskData, final Codec codec) throws CodecException {
        return codec.deserialise(context, TaskData.class);
    }

    /**
     * Generate a context from provided policy worker task data that can be used by this converter to reconstruct the
     * policy worker task when converting a result returned by another worker.
     * @param taskData Policy worker task data representing current processing progress.
     * @param codec Codec to use in serializing context.
     * @return Serialized context that converter will be able to rebuild the provided task data state from.
     * @throws CodecException If an exception occurs serializing the constructed context.
     */
    default byte[] generatePolicyWorkerContext(final TaskData taskData, final Codec codec) throws CodecException {
        return codec.serialise(taskData);
    }

    /**
     * Updates the specified map with details on which workers the converter supports
     */
    void updateSupportedClassifierVersions(Multimap<String, Integer> supportedMap);
}
